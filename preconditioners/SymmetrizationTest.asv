clear all; close all; clc;

%% Set up the domain parameters.
L0 = 1e-6;  % length unit: microns
eps0 = 8.854e-12*L0;
mu0 = 4*pi*1e-7*L0;
c0 = 1/sqrt(eps0*mu0);
wvlen = 3;  % wavelength in L0
xrange = [-5 5];  % x boundaries in L0
yrange = [-5 5];  % y boundaries in L0
N = [80 80];  % [Nx Ny]
Npml = [10 10];  % [Nx_pml Ny_pml]
Nx = N(1); Ny = N(2);
[xrange, yrange, N, dL, Lpml] = domain_with_pml(xrange, yrange, N, Npml);  % domain is expanded to include PML
M = prod(N)
%% Set up the permittivity.
epsilon = 12;
numCells = 1;
cellsize = Nx/numCells;
featureDims = [cellsize/4, cellsize/8, cellsize/4];
eps_air = ones(N);
%% Set up the magnetic current source density.
Mz = zeros(N);
ind_src = ceil(N/2);  % (i,j) indices of the center cell; Nx, Ny should be odd
Mz(ind_src(1), ind_src(2)) = 1;

%% Solve TE equations.
tic
[Hz, Ex, Ey,A, A_mode, b] = solveTE(L0, wvlen, xrange, yrange, eps_air, Mz, Npml);
toc
omega = 2*pi*c0/wvlen;  % angular frequency in rad/sec


%% PML stretched coordinate
%% Deal with the s_factor
%% Deal with the s_factor
% Create the sfactor in each direction and for 'f' and 'b'
s_vector_x_f = create_sfactor(xrange, 'f', omega, eps0, mu0, N(1), Npml(1)); 
s_vector_x_b = create_sfactor(xrange, 'b', omega, eps0, mu0, N(1), Npml(1)); 
s_vector_y_f = create_sfactor(yrange, 'f', omega, eps0, mu0, N(2), Npml(2)); 
s_vector_y_b = create_sfactor(yrange, 'b', omega, eps0, mu0, N(2), Npml(2)); 


% Fill the 2D space with layers of appropriate s-factors
Sx_f_2D = zeros(N); 
Sx_b_2D = zeros(N); 
Sy_f_2D = zeros(N); 
Sy_b_2D = zeros(N); 

for j = 1:N(2)
    Sx_f_2D(:, j) = s_vector_x_f .^-1;  
    Sx_b_2D(:, j) = s_vector_x_b .^-1; 
end

for i = 1:N(1)
    Sy_f_2D(i, :) = s_vector_y_f .^-1; 
    Sy_b_2D(i, :) = s_vector_y_b .^-1; 
end

% surf(abs(Sy_f_2D)); pause

% Reshape the 2D s-factors into a 1D s-array
Sx_f_vec = reshape(Sx_f_2D, M, 1); 
Sx_b_vec = reshape(Sx_b_2D, M, 1); 
Sy_f_vec = reshape(Sy_f_2D, M, 1); 
Sy_b_vec = reshape(Sy_b_2D, M, 1); 

% Construct the 1D total s-array into a diagonal matrix
Sxf = spdiags(Sx_f_vec, 0, M, M); 
Sxb = spdiags(Sx_b_vec, 0, M, M); 
Syf = spdiags(Sy_f_vec, 0, M, M); 
Syb = spdiags(Sy_b_vec, 0, M, M); 


%% SOLVER CODE HERE
N = size(Sxf);

dx = dL(1); dy = dL(2);
sxf = diag(Sxf);
syf = diag(Syf);
sxb = diag(Sxb);
syb = diag(
% sxf = 1-imag(diag(Sxf));
% syf = 1-imag(diag(Sxb));
% sxf = (diag(Sxf));
% syf = (diag(Sxb));
% sxf(sxf>1) = sxf(sxf>1)*1i;
% syf(syf>1) = syf(syf>1)*1i;

numerator = sqrt(sxf).*sqrt(syf);
denominator = 1./(sqrt(sxb).*sqrt(syb));
Pr = spdiags(numerator, 0, N(1), N(2));
Pl = spdiags(denominator, 0, N(1), N(2));

%[Pl, Pr] = SCSymmetrizer2D(Sxf, Syf, Sxb, Syb);
sym = Pl^-1*A*Pr^-1;

sym(1:5, 1:5)
A(1:5, 1:5)

tic
x = (sym\(Pl\b));
x = Pr\x;
Hz2 = reshape(x,100, 100);
toc

%% Visualize the solution.
figure;
visabs(Hz, xrange, yrange)

%%
figure;
visabs(Ex, xrange, yrange - 0.5*dL(2));

figure;
visabs(Ey, xrange - 0.5*dL(1), yrange);

%% Show the movie of the oscillating field.
% figure;
% moviereal(Hz, xrange, yrange)
