%% test script for TM Ex Ey eigensolve

close all
clear

%% Set up the domain parameters.
L0 = 1e-6;  % length unit: microns
mu0 = 4*pi*1e-7*L0;
eps0 = 8.854e-12*L0;
c0 = 1/sqrt(mu0*eps0);
num_cells = 2;
xrange = num_cells*0.075*[-1,1];  % x boundaries in L0
yrange = [-1,1];  % y boundaries in L0
L = [diff(xrange), diff(yrange)];
N = [100 150];  % [Nx Ny]
Npml = 1*[0 10];  % [Nx_pml Ny_pml]

[xrange, yrange, N, dL, Lpml] = domain_with_pml(xrange, yrange, N, Npml);  % domain is expanded to include PML
Nx = N(1); Ny = N(2);
cx = round(Nx/2); cy = round(Ny/2);

omega_p = 0.72*pi*1e15;
lambda_p = 2*pi*3e8/omega_p;
omega_spp = omega_p/sqrt(16+1);
gamma = 5.5e12;
%% Set up the permittivity.
k_bands = [];
%wvlen_scan = linspace(0.8, 3, 100)
%do a logspace wvlen scan
wvlen_scan = logspace(log10(1), log10(8), 40);

omega_scan = 2*pi*c0./(wvlen_scan);
omega_scan = linspace(1e14, 2e15, 50);
figure();
%for wvlen = wvlen_scan
%% light line
kx_scan = linspace(0,pi/L(1),100);
omega_light =  c0*kx_scan;

eps = ones(N);
for omega = omega_scan
    %omega = 2*pi*c0/(wvlen);
    epsilon_metal= 1-omega_p^2/(omega^2 -1i*gamma*omega);
    eps = ones(N);
    x = 1:N(1);
    y = 1:N(2);
    [xx, yy] = meshgrid(x,y);
    half_ny = 10;
    structure_xbounds = xrange;
    structure_ybounds = [-half_ny*dL(2), half_ny*dL(2)];
    fill_factor = 0.2; thickness = 0.3;
    epsilon_diel = 16;
    y_center = 1;
    eps = ...
    hybrid_grating_multi_unit_cell_add(eps,num_cells, N, L, epsilon_diel,...
    epsilon_metal, fill_factor, thickness, y_center);
%     figure();
%     visabs(epsilon, xrange, yrange);
%     drawnow();

    %% eigensolve

    neigs = 60;
    kx_guess = 0*pi/L(1);
 
    [Hz_modes, Ex_modes, Ey_modes, eigenvals] = ...
        eigensolve_TM_dispersive_Kx(L0, omega, xrange, yrange, eps, Npml, neigs, kx_guess);
    pml_threshold = 1e-3;
    eigenmodes = Hz_modes
    %% ======================================================================
    %% ======================= MODE FILTER ==================================
    %% ======================================================================
    N = size(eps);
    Nx = N(1); Ny = N(2);
    xc = round(Nx/2); yc = round(Ny/2);
    x0 = structure_xbounds(1); xf = structure_xbounds(2); 
    y0=structure_ybounds(1); yf = structure_ybounds(2);
    %convert the physical bounds to grid bounds

    Nx0 = xc+round((x0/L(1))*N(1))+1; Nxf = xc+floor((xf/L(1))*N(1));
    Ny0 = yc+round((y0/L(2))*N(2))+1; Nyf = yc+floor((yf/L(2))*N(2));

    %% get PML bounds
    x = 1:Nx; y = 1:Ny; % x and y are node grids
    [X,Y] = meshgrid(x,y);
    X = X.'; Y = Y.';
    mask = zeros(N);
    mask((X<Npml(1) | X > Nx-Npml(1)) | ...
            (Y<Npml(2) | Y> Ny - Npml(2))) = 2;
    mask(Nx0:Nxf, Ny0:Nyf) = 1;
    size(mask)
    n = length(eigenmodes);
    filtered_eigs = [];
    filtered_modes = [];
    c = 1;
    
    %% should we do an epsilon map of pml, air, and structure fields?
    
    %% execute the filters
    for i = 1:n
        structure_fields = eigenmodes{i}(mask == 1);
        %get fields outside of structure
        
        air_fields = eigenmodes{i}(mask == 0);
        
        %get fields inside structure
        PML_fields = eigenmodes{i}(mask == 2);
       
        if(mean(abs(PML_fields))>pml_threshold)
            disp('pml fields too large')
            continue;   
        end

        if(mean(abs(structure_fields))> mean(abs(air_fields)))
            filtered_eigs = [filtered_eigs, eigenvals(i)];
            filtered_modes{c} = eigenmodes{i};
            c = c+1;
        else
            disp('too much field outside')
        end 

    end
  
    %% ======================================================================
    %% ======================================================================
    %% ======================================================================
    
    if(isempty(filtered_eigs))
        disp('none found')
        continue
    end
    subplot(121)
    plot(real(filtered_eigs)*(L(1)/(2*pi)), omega,'.b')
    hold on;
    
    plot(kx_scan*(L(1)/(2*pi)), omega_light)
    ylim([0, max(omega_scan)])
    subplot(122)
    plot(imag(filtered_eigs)*(L(1)/(2*pi)), omega,'.r')
    hold on;
    drawnow();
end

subplot(121)
line([0, 1],[omega_p, omega_p])
line([0, kx_scan(end)], [omega_spp, omega_spp])
%% light line

for i = 1:length(eigenvals)
    Kx = eigenvals(i);
    figure();
    visreal(filtered_modes{i}, xrange, yrange);
    title(strcat(num2str(i), ', ', num2str(real(Kx)/(2*pi)*diff(xrange)))); 
    drawnow();
end
% for i = 1:length(eigenvals)
%     Kx = eigenvals(i);
%     figure();
%     visreal(Hz_modes{i}, xrange, yrange);
%     title(strcat(num2str(i), ', ', num2str(real(Kx)/(2*pi)*diff(xrange)))); 
%     drawnow();
% end


